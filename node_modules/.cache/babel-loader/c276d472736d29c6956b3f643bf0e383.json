{"ast":null,"code":"const fetchJson = (...args) => fetch(...args).then(r => r.json());\n\nconst API_KEY = \"XqM2eyZuT80TEP3dV7AvLfHdMiR9dfVmQzWNLCxH\"; // Function to search for images from Mars rovers.\n\nexport const searchRoverImages = (rover, earth_date, camera) => {\n  return fetchJson(`https://api.nasa.gov/mars-photos/api/v1/rovers/${rover.toLowerCase()}/photos?earth_date=${encodeURIComponent(earth_date)}&api_key=${API_KEY}${camera.length ? `&camera=${encodeURIComponent(camera)}` : \"\"}`);\n}; // Function to search for images based on the provided date, selected rover, and camera.\n// It filters the active rover selections, calls 'searchRoverImages' for each, and returns a promise that resolves when all fetch calls are complete.\n\nexport const searchImages = ({\n  earth_date,\n  roverSelection,\n  camera\n}) => {\n  const promises = Object.entries(roverSelection).filter(([_, value]) => value) // Filter out unselected rovers.\n  .map(([key, _]) => searchRoverImages(key, earth_date, camera)); // Map over selected rovers to create a promise for each fetch call.\n\n  return Promise.all(promises);\n};","map":{"version":3,"sources":["C:/Users/naser/OneDrive/Escritorio/React-Mars-Rover-/src/key/nasa.js"],"names":["fetchJson","args","fetch","then","r","json","API_KEY","searchRoverImages","rover","earth_date","camera","toLowerCase","encodeURIComponent","length","searchImages","roverSelection","promises","Object","entries","filter","_","value","map","key","Promise","all"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAAC,GAAGC,IAAJ,KAAaC,KAAK,CAAC,GAAGD,IAAJ,CAAL,CAAeE,IAAf,CAAqBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAA3B,CAA/B;;AAEA,MAAMC,OAAO,GAAG,0CAAhB,C,CAGA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,UAAR,EAAoBC,MAApB,KAA+B;AAC5D,SAAOV,SAAS,CAAE,kDAAiDQ,KAAK,CAACG,WAAN,EAAoB,sBAAqBC,kBAAkB,CAACH,UAAD,CAAa,YAAWH,OAAQ,GAAEI,MAAM,CAACG,MAAP,GAAiB,WAAUD,kBAAkB,CAACF,MAAD,CAAS,EAAtD,GAA0D,EAAG,EAA7M,CAAhB;AACH,CAFM,C,CAKP;AACA;;AACA,OAAO,MAAMI,YAAY,GAAG,CAAC;AAACL,EAAAA,UAAD;AAAaM,EAAAA,cAAb;AAA6BL,EAAAA;AAA7B,CAAD,KAA0C;AAClE,QAAMM,QAAQ,GAAGC,MAAM,CAACC,OAAP,CAAeH,cAAf,EACZI,MADY,CACL,CAAC,CAACC,CAAD,EAAIC,KAAJ,CAAD,KAAgBA,KADX,EACkB;AADlB,GAEZC,GAFY,CAER,CAAC,CAACC,GAAD,EAAMH,CAAN,CAAD,KAAcb,iBAAiB,CAACgB,GAAD,EAAMd,UAAN,EAAiBC,MAAjB,CAFvB,CAAjB,CADkE,CAGC;;AACnE,SAAOc,OAAO,CAACC,GAAR,CAAYT,QAAZ,CAAP;AACH,CALM","sourcesContent":["const fetchJson = (...args) => fetch(...args).then((r) => r.json());\n\nconst API_KEY = \"XqM2eyZuT80TEP3dV7AvLfHdMiR9dfVmQzWNLCxH\";\n\n\n// Function to search for images from Mars rovers.\nexport const searchRoverImages = (rover, earth_date, camera) => {\n    return fetchJson(`https://api.nasa.gov/mars-photos/api/v1/rovers/${rover.toLowerCase()}/photos?earth_date=${encodeURIComponent(earth_date)}&api_key=${API_KEY}${camera.length ? `&camera=${encodeURIComponent(camera)}` : \"\"}`);\n};\n\n\n// Function to search for images based on the provided date, selected rover, and camera.\n// It filters the active rover selections, calls 'searchRoverImages' for each, and returns a promise that resolves when all fetch calls are complete.\nexport const searchImages = ({earth_date, roverSelection, camera}) => {\n    const promises = Object.entries(roverSelection)\n        .filter(([_, value]) => value) // Filter out unselected rovers.\n        .map(([key, _]) => searchRoverImages(key, earth_date,camera)); // Map over selected rovers to create a promise for each fetch call.\n    return Promise.all(promises);\n};"]},"metadata":{},"sourceType":"module"}