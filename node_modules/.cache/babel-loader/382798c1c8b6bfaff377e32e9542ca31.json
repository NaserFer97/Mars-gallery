{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naser\\\\OneDrive\\\\Escritorio\\\\React-Mars-Rover-\\\\src\\\\pages\\\\main.js\";\n// Importing necessary React hooks and components, along with CSS styles\nimport React, { useState, useEffect } from 'react';\nimport './main.css';\nimport DateSlider from '../widgets/DateSlider';\nimport RoverSelector from '../widgets/RoverSelector';\nimport CameraSelection from '../widgets/CameraSelection';\nimport { isActive } from '../services/sols';\nimport Lightbox from 'react-image-lightbox';\nimport 'react-image-lightbox/style.css'; // Importing Lightbox styles\n// RoverSearch component that takes props for various functionalities\n\nfunction RoverSearch(props) {\n  const {\n    rovers,\n    cameras,\n    camera,\n    roverSelection,\n    earth_date,\n    photos,\n    onCriteriaChange,\n    onSearch\n  } = props; // State for managing Lightbox visibility and selected photo index\n\n  const [isLightboxOpen, setIsLightboxOpen] = useState(false);\n  const [photoIndex, setPhotoIndex] = useState(0); // Effect hook to add parallax scrolling effect to the header\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const parallaxElement = document.querySelector('.App-header');\n\n      if (parallaxElement) {\n        parallaxElement.style.backgroundPositionY = `calc(50% - ${window.pageYOffset * 0.5}px)`;\n      }\n    }; // Attaching scroll event listener\n\n\n    window.addEventListener('scroll', handleScroll); // Cleanup function to remove event listener\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []); // Function to merge criteria changes and initiate search\n\n  const setCriteriaAndPublish = newCriteria => {\n    const merged = { ...props,\n      ...newCriteria\n    };\n    onCriteriaChange(merged);\n    onSearch(merged);\n  }; // Determines active status for rovers based on the earth date\n\n\n  const roversActive = rovers.reduce((acc, curr) => {\n    acc[curr.name.toLowerCase()] = isActive(curr.activePeriod[0], curr.activePeriod[1], earth_date);\n    return acc;\n  }, {}); // Function to handle image click to open Lightbox with selected photo\n\n  const handleImageClick = index => {\n    setPhotoIndex(index);\n    setIsLightboxOpen(true);\n  }; // The main render function that displays the header, form selections, and images\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Mars Rover Images\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid App-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"col-10 offset-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DateSlider, {\n    earth_date: earth_date // onDateChanged is an event handler that updates the search criteria\n    // with the new date selected from the DateSlider component\n    ,\n    onDateChanged: date => setCriteriaAndPublish({\n      earth_date: date\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(RoverSelector, {\n    roversActive: roversActive,\n    rovers: rovers,\n    roverSelection: roverSelection // onRoverSelection is an event handler that updates the search criteria\n    // with the new rover selected from the RoverSelector component\n    ,\n    onRoverSelection: selected => setCriteriaAndPublish({\n      roverSelection: selected\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(CameraSelection, {\n    camera: camera,\n    cameras: cameras // onCameraSelected is an event handler that updates the search criteria\n    // with the new camera selected from the CameraSelection component\n    ,\n    onCameraSelected: selectedCamera => setCriteriaAndPublish({\n      camera: selectedCamera\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 1\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-10 offset-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, photos.length === 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"No results\") : photos.map((photo, index) =>\n  /*#__PURE__*/\n  // Clickable image that will open the Lightbox\n  React.createElement(\"div\", {\n    key: photo.id,\n    className: \"col-lg-4 col-12\",\n    onClick: () => handleImageClick(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"App-img-result\",\n    src: photo.img_src,\n    alt: \"Mars\",\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }))))))), isLightboxOpen && /*#__PURE__*/React.createElement(Lightbox, {\n    mainSrc: photos[photoIndex].img_src,\n    nextSrc: photos[(photoIndex + 1) % photos.length].img_src,\n    prevSrc: photos[(photoIndex + photos.length - 1) % photos.length].img_src,\n    onCloseRequest: () => setIsLightboxOpen(false),\n    onMovePrevRequest: () => setPhotoIndex((photoIndex + photos.length - 1) % photos.length),\n    onMoveNextRequest: () => setPhotoIndex((photoIndex + 1) % photos.length),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default RoverSearch;","map":{"version":3,"sources":["C:/Users/naser/OneDrive/Escritorio/React-Mars-Rover-/src/pages/main.js"],"names":["React","useState","useEffect","DateSlider","RoverSelector","CameraSelection","isActive","Lightbox","RoverSearch","props","rovers","cameras","camera","roverSelection","earth_date","photos","onCriteriaChange","onSearch","isLightboxOpen","setIsLightboxOpen","photoIndex","setPhotoIndex","handleScroll","parallaxElement","document","querySelector","style","backgroundPositionY","window","pageYOffset","addEventListener","removeEventListener","setCriteriaAndPublish","newCriteria","merged","roversActive","reduce","acc","curr","name","toLowerCase","activePeriod","handleImageClick","index","date","selected","selectedCamera","length","map","photo","id","img_src","cursor"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,gCAAP,C,CAAyC;AAEzC;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,gBAPI;AAQJC,IAAAA;AARI,MASFR,KATJ,CAD0B,CAY1B;;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,CAAD,CAA5C,CAd0B,CAgB1B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,YAAY,GAAG,MAAM;AACzB,YAAMC,eAAe,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAxB;;AACA,UAAIF,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACG,KAAhB,CAAsBC,mBAAtB,GAA6C,cAAaC,MAAM,CAACC,WAAP,GAAqB,GAAI,KAAnF;AACD;AACF,KALD,CADc,CAQd;;;AACAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCR,YAAlC,EATc,CAUd;;AACA,WAAO,MAAMM,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCT,YAArC,CAAb;AACD,GAZQ,EAYN,EAZM,CAAT,CAjB0B,CA+B1B;;AACA,QAAMU,qBAAqB,GAAIC,WAAD,IAAiB;AAC7C,UAAMC,MAAM,GAAG,EAAE,GAAGzB,KAAL;AAAY,SAAGwB;AAAf,KAAf;AACAjB,IAAAA,gBAAgB,CAACkB,MAAD,CAAhB;AACAjB,IAAAA,QAAQ,CAACiB,MAAD,CAAR;AACD,GAJD,CAhC0B,CAsC1B;;;AACA,QAAMC,YAAY,GAAGzB,MAAM,CAAC0B,MAAP,CAAc,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChDD,IAAAA,GAAG,CAACC,IAAI,CAACC,IAAL,CAAUC,WAAV,EAAD,CAAH,GAA+BlC,QAAQ,CAACgC,IAAI,CAACG,YAAL,CAAkB,CAAlB,CAAD,EAAuBH,IAAI,CAACG,YAAL,CAAkB,CAAlB,CAAvB,EAA6C3B,UAA7C,CAAvC;AACA,WAAOuB,GAAP;AACD,GAHoB,EAGlB,EAHkB,CAArB,CAvC0B,CA4C1B;;AACA,QAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClCtB,IAAAA,aAAa,CAACsB,KAAD,CAAb;AACAxB,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAHD,CA7C0B,CAkD1B;;;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI,mBAAJ,CADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,UAAD;AACR,IAAA,UAAU,EAAEL,UADJ,CAER;AACA;AAHQ;AAIR,IAAA,aAAa,EAAG8B,IAAD,IAAUZ,qBAAqB,CAAC;AAAElB,MAAAA,UAAU,EAAE8B;AAAd,KAAD,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAQV,oBAAC,aAAD;AACE,IAAA,YAAY,EAAET,YADhB;AAEE,IAAA,MAAM,EAAEzB,MAFV;AAGE,IAAA,cAAc,EAAEG,cAHlB,CAIE;AACA;AALF;AAME,IAAA,gBAAgB,EAAGgC,QAAD,IAAcb,qBAAqB,CAAC;AAAEnB,MAAAA,cAAc,EAAEgC;AAAlB,KAAD,CANvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARU,eAiBV,oBAAC,eAAD;AACE,IAAA,MAAM,EAAEjC,MADV;AAEE,IAAA,OAAO,EAAED,OAFX,CAGE;AACA;AAJF;AAKE,IAAA,gBAAgB,EAAGmC,cAAD,IAAoBd,qBAAqB,CAAC;AAAEpB,MAAAA,MAAM,EAAEkC;AAAV,KAAD,CAL7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBU,CAFF,CADF,eA8BE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG/B,MAAM,CAACgC,MAAP,KAAkB,CAAlB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAG,YAAH,CADD,GAGChC,MAAM,CAACiC,GAAP,CAAW,CAACC,KAAD,EAAQN,KAAR;AAAA;AACT;AACA;AAAK,IAAA,GAAG,EAAEM,KAAK,CAACC,EAAhB;AAAoB,IAAA,SAAS,EAAC,iBAA9B;AAAgD,IAAA,OAAO,EAAE,MAAMR,gBAAgB,CAACC,KAAD,CAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,GAAG,EAAEM,KAAK,CAACE,OAA3C;AAAoD,IAAA,GAAG,EAAC,MAAxD;AAA+D,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CALJ,CADF,CADF,CA9BF,CAJF,EAqDGlC,cAAc,iBACb,oBAAC,QAAD;AACE,IAAA,OAAO,EAAEH,MAAM,CAACK,UAAD,CAAN,CAAmB+B,OAD9B;AAEE,IAAA,OAAO,EAAEpC,MAAM,CAAC,CAACK,UAAU,GAAG,CAAd,IAAmBL,MAAM,CAACgC,MAA3B,CAAN,CAAyCI,OAFpD;AAGE,IAAA,OAAO,EAAEpC,MAAM,CAAC,CAACK,UAAU,GAAGL,MAAM,CAACgC,MAApB,GAA6B,CAA9B,IAAmChC,MAAM,CAACgC,MAA3C,CAAN,CAAyDI,OAHpE;AAIE,IAAA,cAAc,EAAE,MAAMhC,iBAAiB,CAAC,KAAD,CAJzC;AAKE,IAAA,iBAAiB,EAAE,MAAME,aAAa,CAAC,CAACD,UAAU,GAAGL,MAAM,CAACgC,MAApB,GAA6B,CAA9B,IAAmChC,MAAM,CAACgC,MAA3C,CALxC;AAME,IAAA,iBAAiB,EAAE,MAAM1B,aAAa,CAAC,CAACD,UAAU,GAAG,CAAd,IAAmBL,MAAM,CAACgC,MAA3B,CANxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtDJ,CADF;AAkED;;AAED,eAAevC,WAAf","sourcesContent":["// Importing necessary React hooks and components, along with CSS styles\nimport React, { useState, useEffect } from 'react';\nimport './main.css';\nimport DateSlider from '../widgets/DateSlider';\nimport RoverSelector from '../widgets/RoverSelector';\nimport CameraSelection from '../widgets/CameraSelection';\nimport { isActive } from '../services/sols';\nimport Lightbox from 'react-image-lightbox';\nimport 'react-image-lightbox/style.css'; // Importing Lightbox styles\n\n// RoverSearch component that takes props for various functionalities\nfunction RoverSearch(props) {\n  const {\n    rovers,\n    cameras,\n    camera,\n    roverSelection,\n    earth_date,\n    photos,\n    onCriteriaChange,\n    onSearch,\n  } = props;\n\n  // State for managing Lightbox visibility and selected photo index\n  const [isLightboxOpen, setIsLightboxOpen] = useState(false);\n  const [photoIndex, setPhotoIndex] = useState(0);\n\n  // Effect hook to add parallax scrolling effect to the header\n  useEffect(() => {\n    const handleScroll = () => {\n      const parallaxElement = document.querySelector('.App-header');\n      if (parallaxElement) {\n        parallaxElement.style.backgroundPositionY = `calc(50% - ${window.pageYOffset * 0.5}px)`;\n      }\n    };\n\n    // Attaching scroll event listener\n    window.addEventListener('scroll', handleScroll);\n    // Cleanup function to remove event listener\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Function to merge criteria changes and initiate search\n  const setCriteriaAndPublish = (newCriteria) => {\n    const merged = { ...props, ...newCriteria };\n    onCriteriaChange(merged);\n    onSearch(merged);\n  };\n\n  // Determines active status for rovers based on the earth date\n  const roversActive = rovers.reduce((acc, curr) => {\n    acc[curr.name.toLowerCase()] = isActive(curr.activePeriod[0], curr.activePeriod[1], earth_date);\n    return acc;\n  }, {});\n\n  // Function to handle image click to open Lightbox with selected photo\n  const handleImageClick = (index) => {\n    setPhotoIndex(index);\n    setIsLightboxOpen(true);\n  };\n\n  // The main render function that displays the header, form selections, and images\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h2>Mars Rover Images</h2>\n      </header>\n      <div className=\"container-fluid App-form\">\n        <div className=\"row\">\n          {/* Form and selection components */}\n          <form className=\"col-10 offset-1\">\n          <DateSlider \n  earth_date={earth_date} \n  // onDateChanged is an event handler that updates the search criteria\n  // with the new date selected from the DateSlider component\n  onDateChanged={(date) => setCriteriaAndPublish({ earth_date: date })} \n/>\n\n<RoverSelector \n  roversActive={roversActive} \n  rovers={rovers} \n  roverSelection={roverSelection} \n  // onRoverSelection is an event handler that updates the search criteria\n  // with the new rover selected from the RoverSelector component\n  onRoverSelection={(selected) => setCriteriaAndPublish({ roverSelection: selected })} \n/>\n\n<CameraSelection \n  camera={camera} \n  cameras={cameras} \n  // onCameraSelected is an event handler that updates the search criteria\n  // with the new camera selected from the CameraSelection component\n  onCameraSelected={(selectedCamera) => setCriteriaAndPublish({ camera: selectedCamera })} \n/>\n\n          </form>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-10 offset-1\">\n            <div className=\"row\">\n              {/* Displaying results, if no photos are available, show a message */}\n              {photos.length === 0 ? (\n                <p>No results</p>\n              ) : (\n                photos.map((photo, index) => (\n                  // Clickable image that will open the Lightbox\n                  <div key={photo.id} className=\"col-lg-4 col-12\" onClick={() => handleImageClick(index)}>\n                    <img className=\"App-img-result\" src={photo.img_src} alt=\"Mars\" style={{ cursor: 'pointer' }} />\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Lightbox component for viewing and navigating photos */}\n      {isLightboxOpen && (\n        <Lightbox\n          mainSrc={photos[photoIndex].img_src}\n          nextSrc={photos[(photoIndex + 1) % photos.length].img_src}\n          prevSrc={photos[(photoIndex + photos.length - 1) % photos.length].img_src}\n          onCloseRequest={() => setIsLightboxOpen(false)}\n          onMovePrevRequest={() => setPhotoIndex((photoIndex + photos.length - 1) % photos.length)}\n          onMoveNextRequest={() => setPhotoIndex((photoIndex + 1) % photos.length)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default RoverSearch;\n"]},"metadata":{},"sourceType":"module"}