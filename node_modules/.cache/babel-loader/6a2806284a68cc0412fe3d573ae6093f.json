{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\naser\\\\OneDrive\\\\Escritorio\\\\React-Mars-Rover-\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";var fetchJson=function fetchJson(){return fetch.apply(void 0,arguments).then(function(r){return r.json();});};var API_KEY=\"XqM2eyZuT80TEP3dV7AvLfHdMiR9dfVmQzWNLCxH\";// Function to search for images from Mars rovers.\nexport var searchRoverImages=function searchRoverImages(rover,earth_date,camera){return fetchJson(\"https://api.nasa.gov/mars-photos/api/v1/rovers/\".concat(rover.toLowerCase(),\"/photos?earth_date=\").concat(encodeURIComponent(earth_date),\"&api_key=\").concat(API_KEY).concat(camera.length?\"&camera=\".concat(encodeURIComponent(camera)):\"\"));};// Function to search for images based on the provided date, selected rover, and camera.\n// It filters the active rover selections, calls 'searchRoverImages' for each, and returns a promise that resolves when all fetch calls are complete.\nexport var searchImages=function searchImages(_ref){var earth_date=_ref.earth_date,roverSelection=_ref.roverSelection,camera=_ref.camera;var promises=Object.entries(roverSelection).filter(function(_ref2){var _ref3=_slicedToArray(_ref2,2),_=_ref3[0],value=_ref3[1];return value;})// Filter out unselected rovers.\n.map(function(_ref4){var _ref5=_slicedToArray(_ref4,2),key=_ref5[0],_=_ref5[1];return searchRoverImages(key,earth_date,camera);});// Map over selected rovers to create a promise for each fetch call.\nreturn Promise.all(promises);// Use Promise.all to wait for all the promises to resolve and return the combined result.\n};","map":{"version":3,"sources":["C:/Users/naser/OneDrive/Escritorio/React-Mars-Rover-/src/key/nasa.js"],"names":["fetchJson","fetch","then","r","json","API_KEY","searchRoverImages","rover","earth_date","camera","toLowerCase","encodeURIComponent","length","searchImages","roverSelection","promises","Object","entries","filter","_","value","map","key","Promise","all"],"mappings":"qLAAA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,SAAaC,CAAAA,KAAK,MAAL,mBAAeC,IAAf,CAAoB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,IAAF,EAAP,EAApB,CAAb,EAAlB,CAEA,GAAMC,CAAAA,OAAO,CAAG,0CAAhB,CAGA;AACA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAQC,UAAR,CAAoBC,MAApB,CAA+B,CAC5D,MAAOT,CAAAA,SAAS,0DAAmDO,KAAK,CAACG,WAAN,EAAnD,+BAA4FC,kBAAkB,CAACH,UAAD,CAA9G,qBAAsIH,OAAtI,SAAgJI,MAAM,CAACG,MAAP,mBAA2BD,kBAAkB,CAACF,MAAD,CAA7C,EAA0D,EAA1M,EAAhB,CACH,CAFM,CAKP;AACA;AACA,MAAO,IAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAA0C,IAAxCL,CAAAA,UAAwC,MAAxCA,UAAwC,CAA5BM,cAA4B,MAA5BA,cAA4B,CAAZL,MAAY,MAAZA,MAAY,CAClE,GAAMM,CAAAA,QAAQ,CAAGC,MAAM,CAACC,OAAP,CAAeH,cAAf,EACZI,MADY,CACL,kDAAEC,CAAF,UAAKC,KAAL,gBAAgBA,CAAAA,KAAhB,EADK,CACkB;AADlB,CAEZC,GAFY,CAER,kDAAEC,GAAF,UAAOH,CAAP,gBAAcb,CAAAA,iBAAiB,CAACgB,GAAD,CAAMd,UAAN,CAAiBC,MAAjB,CAA/B,EAFQ,CAAjB,CAEmE;AACnE,MAAOc,CAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,CAAP,CAA6B;AAChC,CALM","sourcesContent":["const fetchJson = (...args) => fetch(...args).then((r) => r.json());\n\nconst API_KEY = \"XqM2eyZuT80TEP3dV7AvLfHdMiR9dfVmQzWNLCxH\";\n\n\n// Function to search for images from Mars rovers.\nexport const searchRoverImages = (rover, earth_date, camera) => {\n    return fetchJson(`https://api.nasa.gov/mars-photos/api/v1/rovers/${rover.toLowerCase()}/photos?earth_date=${encodeURIComponent(earth_date)}&api_key=${API_KEY}${camera.length ? `&camera=${encodeURIComponent(camera)}` : \"\"}`);\n};\n\n\n// Function to search for images based on the provided date, selected rover, and camera.\n// It filters the active rover selections, calls 'searchRoverImages' for each, and returns a promise that resolves when all fetch calls are complete.\nexport const searchImages = ({earth_date, roverSelection, camera}) => {\n    const promises = Object.entries(roverSelection)\n        .filter(([_, value]) => value) // Filter out unselected rovers.\n        .map(([key, _]) => searchRoverImages(key, earth_date,camera)); // Map over selected rovers to create a promise for each fetch call.\n    return Promise.all(promises);// Use Promise.all to wait for all the promises to resolve and return the combined result.\n};"]},"metadata":{},"sourceType":"module"}