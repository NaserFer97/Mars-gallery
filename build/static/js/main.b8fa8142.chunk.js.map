{"version":3,"sources":["serviceWorker.js","key/nasa.js","widgets/DateSlider.js","services/sols.js","widgets/RoverSelector.js","widgets/CameraSelection.js","pages/main.js","pages/ConnectedRoverSearch.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","searchRoverImages","rover","earth_date","camera","fetch","then","r","json","fetchJson","toLowerCase","encodeURIComponent","length","searchImages","roverSelection","promises","Object","entries","filter","map","key","Promise","all","DateSlider","startDate","lastDate","date","onDateChanged","days","moment","diff","sol","className","style","textAlign","htmlFor","data-testid","type","id","min","max","value","onChange","event","add","format","solToDate","target","RoverSelector","roversActive","rovers","onRoverSelection","name","onClick","roverName","checked","e","stopPropagation","activePeriod","RoverSearch","props","cameras","photos","onCriteriaChange","onSearch","useState","isLightboxOpen","setIsLightboxOpen","photoIndex","setPhotoIndex","useEffect","handleScroll","parallaxElement","document","querySelector","backgroundPositionY","pageYOffset","addEventListener","removeEventListener","setCriteriaAndPublish","newCriteria","merged","reduce","acc","curr","rangeStart","rangeEnd","selected","fromMoment","toMoment","selectedMoment","isActive","x","CameraSelection","onCameraSelected","selectedCamera","photo","index","handleImageClick","src","img_src","alt","cursor","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","stateChunk","FHAZ","RHAZ","MAST","CHEMCAM","MAHLI","MARDI","NAVCAM","PANCAM","MINITES","spirit","opportunity","curiosity","ConnectedRoverSearch","connect","state","dispatch","criteria","debounce","payload","nasa","store","compose","applyMiddleware","promise","devToolsExtension","f","createStore","finalCreateStore","action","response","flat","App","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8fa8142.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n     \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        \n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n        \n              console.log(\n             \n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n           \n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const fetchJson = (...args) => fetch(...args).then((r) => r.json());\n\nconst API_KEY = \"XqM2eyZuT80TEP3dV7AvLfHdMiR9dfVmQzWNLCxH\";\n\n\n// Function to search for images from Mars rovers.\nexport const searchRoverImages = (rover, earth_date, camera) => {\n    return fetchJson(`https://api.nasa.gov/mars-photos/api/v1/rovers/${rover.toLowerCase()}/photos?earth_date=${encodeURIComponent(earth_date)}&api_key=${API_KEY}${camera.length ? `&camera=${encodeURIComponent(camera)}` : \"\"}`);\n};\n\n\n// Function to search for images based on the provided date, selected rover, and camera.\n// It filters the active rover selections, calls 'searchRoverImages' for each, and returns a promise that resolves when all fetch calls are complete.\nexport const searchImages = ({earth_date, roverSelection, camera}) => {\n    const promises = Object.entries(roverSelection)\n        .filter(([_, value]) => value) // Filter out unselected rovers.\n        .map(([key, _]) => searchRoverImages(key, earth_date,camera)); // Map over selected rovers to create a promise for each fetch call.\n    return Promise.all(promises);// Use Promise.all to wait for all the promises to resolve and return the combined result.\n};","import React from 'react';\nimport './dateslider.css';\n// Importing utility functions from the 'sols' service that help with date calculations.\nimport { firstDay, lastDay, dateToSol, solToDate, daysBetween } from '../services/sols';\n\nconst DateSlider = ({ earth_date, onDateChanged }) => {\n    // Calculate the total number of days between the first and last day of the mission.\n    const days = daysBetween(firstDay, lastDay);\n    // Convert the current Earth date to the corresponding Martian sol.\n    const sol = dateToSol(earth_date);\n\n    // This function is called whenever the slider value changes.\n    // It converts the sol back to an Earth date and triggers the onDateChanged event.\n    function onSlide(event) {\n        onDateChanged(solToDate(event.target.value));\n    }\n\n    return (\n        <div className=\"Dateslider\">\n            <div className=\"row\">\n                <div className=\"col-12\" style={{ textAlign: \"center\" }}>\n                    {/* Displaying the label for the date slider */}\n                    <label htmlFor=\"date\">Earth Day</label>\n                    {/* Displaying the currently selected Earth date */}\n                    <p className=\"Dateslider-date\" data-testid=\"date-label\">{earth_date}</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {/* The range input represents the slider, allowing the user to select a date\n                        within the range of the mission's duration. */}\n                    <input data-testid=\"date-slider\"\n                        type=\"range\"\n                        id=\"date\"\n                        className=\"form-control\"\n                        min=\"1\"\n                        max={days}\n                        value={sol}\n                        onChange={onSlide}\n                    ></input>\n                    {/* Displays the start and end dates of the mission below the slider */}\n                    <div className=\"text-center mt-2\">\n                        <small className=\"small\">{firstDay}</small>\n                        <span className=\"mx-4\">|</span>\n                        <small className=\"small\">{lastDay}</small>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DateSlider;\n","import moment from 'moment';\n\n//  first and last days of the Mars Rover mission\nexport const [firstDay, lastDay] = [\"2004-01-05\", \"2019-09-28\"];\n// Define a constant for the date format to be used throughout the application\nexport const dateFormat = \"YYYY-MM-DD\";\n\n// Convert an Earth date to a Martian sol (a Martian day).\n// Mars sols are counted from the first day of the mission.\nexport const dateToSol = (date) => \n  moment(date, dateFormat).diff(moment(firstDay, dateFormat), 'days') + 1;\n\n// Convert a Martian sol back to an Earth date.\n// Adds the number of sols to the first day of the mission to calculate the date.\nexport const solToDate = (sol) => \n  moment(firstDay, dateFormat).add(sol - 1, 'days').format(dateFormat);\n\n// Calculate the number of days between two dates.\nexport const daysBetween = (startDate, lastDate) => \n  moment(lastDate, dateFormat).diff(moment(startDate, dateFormat), 'days') + 1;\n\n// Determine if a selected date is within a given active date range.\n// This is to check if a rover was active on a certain date.\nexport const isActive = (rangeStart, rangeEnd, selected) => {\n    const fromMoment = moment(rangeStart, dateFormat);\n    const toMoment = moment(rangeEnd, dateFormat);\n    const selectedMoment = moment(selected, dateFormat);\n    return selectedMoment >= fromMoment && selectedMoment <= toMoment;\n};\n","import React from \"react\";\nimport \"./roverselector.css\";\n\n// The RoverSelector component allows users to select which Mars rovers' data they want to view.\nfunction RoverSelector({ roversActive, rovers, roverSelection, onRoverSelection }) {\n  \n  // onClick function toggles the selection state of a rover when its corresponding\n  // UI element is clicked.\n  const onClick = (roverName) => {\n    onRoverSelection({\n      ...roverSelection,\n      [roverName]: !roverSelection[roverName],\n    });\n  };\n\n  return (\n    <div className=\"RoverSelector-container\">\n      {/* Map through the rovers array and create a card for each rover */}\n      {rovers.map((rover) => (\n        <div\n          key={rover.name} // Unique key for each rover element, which is required by React\n          // Conditional class assignment; if the rover is not active on the selected date, \n          // add the 'inactive' class, which is likely styled differently\n          className={`RoverSelector-card ${roversActive[rover.name.toLowerCase()] ? \"\" : \"inactive\"}`}\n          // Register the onClick handler for when the rover card is clicked\n          onClick={() => onClick(rover.name.toLowerCase())}\n        >\n          <label className=\"RoverSelector-title\">\n            {/* Checkbox allows users to select or deselect a rover.\n                It's checked state is bound to the roverSelection state */}\n            <input\n              type=\"checkbox\"\n              data-testid=\"rover-selected\" // Test ID for testing purposes\n              checked={roverSelection[rover.name.toLowerCase()]}\n              onChange={() => {}} // Empty onChange because the checkbox is controlled by the onClick on the label\n              // Stop the propagation to prevent the onClick on the label from being fired when the checkbox itself is clicked\n              onClick={(e) => e.stopPropagation()}\n            />\n            {rover.name} {/* Display the rover's name */}\n          </label>\n          {/* Display the active period of the rover */}\n          <div className=\"RoverSelector-period\">\n            <small>\n              {rover.activePeriod[0]} - {rover.activePeriod[1]}\n            </small>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default RoverSelector;\n","import React from \"react\";\r\nimport \"./roverselector.css\";\r\n\r\n// The RoverSelector component allows users to select which Mars rovers' data they want to view.\r\nfunction RoverSelector({ roversActive, rovers = [], roverSelection, onRoverSelection }) {\r\n  \r\n  // onClick function toggles the selection state of a rover when its corresponding\r\n  // UI element is clicked.\r\n  const onClick = (roverName) => {\r\n    onRoverSelection({\r\n      ...roverSelection,\r\n      [roverName]: !roverSelection[roverName],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"RoverSelector-container\">\r\n      {/* Map through the rovers array and create a card for each rover */}\r\n      {rovers.map((rover) => (\r\n        <div\r\n          key={rover.name} // Unique key for each rover element, which is required by React\r\n          // Conditional class assignment; if the rover is not active on the selected date, \r\n          // add the 'inactive' class, which is likely styled differently\r\n          className={`RoverSelector-card ${roversActive[rover.name.toLowerCase()] ? \"\" : \"inactive\"}`}\r\n          // Register the onClick handler for when the rover card is clicked\r\n          onClick={() => onClick(rover.name.toLowerCase())}\r\n        >\r\n          <label className=\"RoverSelector-title\">\r\n            {/* Checkbox allows users to select or deselect a rover.\r\n                It's checked state is bound to the roverSelection state */}\r\n            <input\r\n              type=\"checkbox\"\r\n              data-testid=\"rover-selected\" // Test ID for testing purposes\r\n              checked={roverSelection[rover.name.toLowerCase()]}\r\n              onChange={() => {}} // Empty onChange because the checkbox is controlled by the onClick on the label\r\n              // Stop the propagation to prevent the onClick on the label from being fired when the checkbox itself is clicked\r\n              onClick={(e) => e.stopPropagation()}\r\n            />\r\n            {rover.name} {/* Display the rover's name */}\r\n          </label>\r\n          {/* Display the active period of the rover */}\r\n          <div className=\"RoverSelector-period\">\r\n            <small>\r\n              {rover.activePeriod[0]} - {rover.activePeriod[1]}\r\n            </small>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoverSelector;\r\n","// Importing necessary React hooks and components, along with CSS styles\nimport React, { useState, useEffect } from \"react\";\nimport \"./main.css\";\nimport DateSlider from \"../widgets/DateSlider\";\nimport RoverSelector from \"../widgets/RoverSelector\";\nimport CameraSelection from \"../widgets/CameraSelection\";\nimport { isActive } from \"../services/sols\";\nimport Lightbox from \"react-image-lightbox\";\nimport \"react-image-lightbox/style.css\"; // Importing Lightbox styles\n\n// RoverSearch component that takes props for various functionalities\nfunction RoverSearch(props) {\n  const {\n    rovers,\n    cameras,\n    camera,\n    roverSelection,\n    earth_date,\n    photos,\n    onCriteriaChange,\n    onSearch,\n  } = props;\n\n  // State for managing Lightbox visibility and selected photo index\n  const [isLightboxOpen, setIsLightboxOpen] = useState(false);\n  const [photoIndex, setPhotoIndex] = useState(0);\n\n  // Effect hook to add parallax scrolling effect to the header\n  useEffect(() => {\n    const handleScroll = () => {\n      const parallaxElement = document.querySelector(\".App-header\");\n      if (parallaxElement) {\n        parallaxElement.style.backgroundPositionY = `calc(50% - ${window.pageYOffset *\n          0.5}px)`;\n      }\n    };\n\n    // Attaching scroll event listener\n    window.addEventListener(\"scroll\", handleScroll);\n    // Cleanup function to remove event listener\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  // Function to merge criteria changes and initiate search\n  const setCriteriaAndPublish = (newCriteria) => {\n    const merged = { ...props, ...newCriteria };\n    onCriteriaChange(merged);\n    onSearch(merged);\n  };\n\n  // Determines active status for rovers based on the earth date\n  const roversActive = rovers.reduce((acc, curr) => {\n    acc[curr.name.toLowerCase()] = isActive(\n      curr.activePeriod[0],\n      curr.activePeriod[1],\n      earth_date\n    );\n    return acc;\n  }, {});\n\n  // Function to handle image click to open Lightbox with selected photo\n  const handleImageClick = (index) => {\n    setPhotoIndex(index);\n    setIsLightboxOpen(true);\n  };\n\n  // The main render function that displays the header, form selections, and images\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h2>Mars Rover Images</h2>\n      </header>\n      <div className=\"container-fluid App-form\">\n        <div className=\"row\">\n          {/* Form and selection components */}\n          <form className=\"col-10 offset-1\">\n            <DateSlider\n              earth_date={earth_date}x\n              // onDateChanged is an event handler that updates the search criteria\n              // with the new date selected from the DateSlider component\n              onDateChanged={(date) =>\n                setCriteriaAndPublish({ earth_date: date })\n              }\n            />\n\n            <RoverSelector\n              roversActive={roversActive}\n              rovers={rovers}\n              roverSelection={roverSelection}\n              // onRoverSelection is an event handler that updates the search criteria\n              // with the new rover selected from the RoverSelector component\n              onRoverSelection={(selected) =>\n                setCriteriaAndPublish({ roverSelection: selected })\n              }\n            />\n\n            <CameraSelection\n              camera={camera}\n              cameras={cameras}\n              // onCameraSelected is an event handler that updates the search criteria\n              // with the new camera selected from the CameraSelection component\n              onCameraSelected={(selectedCamera) =>\n                setCriteriaAndPublish({ camera: selectedCamera })\n              }\n            />\n          </form>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-10 offset-1\">\n            <div className=\"row\">\n              {/* Displaying results, if no photos are available, show a message */}\n              {photos.length === 0 ? (\n                <p>No results</p>\n              ) : (\n                photos.map((photo, index) => (\n                  // Clickable image that will open the Lightbox\n                  <div\n                    key={photo.id}\n                    className=\"col-lg-4 col-12\"\n                    onClick={() => handleImageClick(index)}\n                  >\n                    <img\n                      className=\"App-img-result\"\n                      src={photo.img_src}\n                      alt=\"Mars\"\n                      style={{ cursor: \"pointer\" }}\n                    />\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Lightbox component for viewing and navigating photos */}\n      {isLightboxOpen && (\n        <Lightbox\n          mainSrc={photos[photoIndex].img_src}\n          nextSrc={photos[(photoIndex + 1) % photos.length].img_src}\n          prevSrc={\n            photos[(photoIndex + photos.length - 1) % photos.length].img_src\n          }\n          onCloseRequest={() => setIsLightboxOpen(false)}\n          onMovePrevRequest={() =>\n            setPhotoIndex((photoIndex + photos.length - 1) % photos.length)\n          }\n          onMoveNextRequest={() =>\n            setPhotoIndex((photoIndex + 1) % photos.length)\n          }\n        />\n      )}\n    </div>\n  );\n}\n\nexport default RoverSearch;\n","import { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport * as nasa from '../key/nasa';\nimport RoverSearch from './main';\n\n\n\n// A static list of Mars Rovers with their active periods.\nexport const rovers = [\n  { name: \"Spirit\", activePeriod: [\"2004-01-05\", \"2010-03-21\"] },\n  { name: \"Opportunity\", activePeriod: [\"2004-01-26\", \"2018-06-11\"] },\n  { name: \"Curiosity\", activePeriod: [\"2012-08-07\", \"2019-09-28\"] }\n];\n\n\n// A mapping of camera codes to their full descriptive names.\n\nexport const cameras = {\n  FHAZ: \"Front Hazard Avoidance Camera\",\n  RHAZ: \"Rear Hazard Avoidance Camera\",\n  MAST: \"Mast Camera\",\n  CHEMCAM: \"Chemistry and Camera Complex\",\n  MAHLI: \"Mars Hand Lens Imager\",\n  MARDI: \"Mars Descent Imager\",\n  NAVCAM: \"Navigation Camera\",\n  PANCAM: \"Panoramic Camera\",\n  MINITES: \"Miniature Thermal Emission Spectrometer (Mini-TES)\"\n};\n\n\n// A default selection state indicating which rovers to search images for.\nexport const roverSelection = {\n  spirit: true,\n  opportunity: true,\n  curiosity: true\n};\n\n\n// An initial state chunk containing default values and an empty photos array.\nexport const stateChunk = {\n  rovers: rovers, \n  cameras: cameras, \n  roverSelection,\n  earth_date: \"2019-09-28\",\n  camera: \"FHAZ\",\n  photos: [{\"id\":689597,\"sol\":2540,\"camera\":{\"id\":20,\"name\":\"FHAZ\",\"rover_id\":5,\"full_name\":\"Front Hazard Avoidance Camera\"},\"img_src\":\"https://mars.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/02540/opgs/edr/fcam/FLB_622990123EDR_F0763002FHAZ00341M_.JPG\",\"earth_date\":\"2019-09-28\",\"rover\":{\"id\":5,\"name\":\"Curiosity\",\"landing_date\":\"2012-08-06\",\"launch_date\":\"2011-11-26\",\"status\":\"active\",\"max_sol\":2540,\"max_date\":\"2019-09-28\",\"total_photos\":366206,\"cameras\":[{\"name\":\"FHAZ\",\"full_name\":\"Front Hazard Avoidance Camera\"},{\"name\":\"NAVCAM\",\"full_name\":\"Navigation Camera\"},{\"name\":\"MAST\",\"full_name\":\"Mast Camera\"},{\"name\":\"CHEMCAM\",\"full_name\":\"Chemistry and Camera Complex\"},{\"name\":\"MAHLI\",\"full_name\":\"Mars Hand Lens Imager\"},{\"name\":\"MARDI\",\"full_name\":\"Mars Descent Imager\"},{\"name\":\"RHAZ\",\"full_name\":\"Rear Hazard Avoidance Camera\"}]}},{\"id\":689598,\"sol\":2540,\"camera\":{\"id\":20,\"name\":\"FHAZ\",\"rover_id\":5,\"full_name\":\"Front Hazard Avoidance Camera\"},\"img_src\":\"https://mars.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/02540/opgs/edr/fcam/FRB_622990123EDR_F0763002FHAZ00341M_.JPG\",\"earth_date\":\"2019-09-28\",\"rover\":{\"id\":5,\"name\":\"Curiosity\",\"landing_date\":\"2012-08-06\",\"launch_date\":\"2011-11-26\",\"status\":\"active\",\"max_sol\":2540,\"max_date\":\"2019-09-28\",\"total_photos\":366206,\"cameras\":[{\"name\":\"FHAZ\",\"full_name\":\"Front Hazard Avoidance Camera\"},{\"name\":\"NAVCAM\",\"full_name\":\"Navigation Camera\"},{\"name\":\"MAST\",\"full_name\":\"Mast Camera\"},{\"name\":\"CHEMCAM\",\"full_name\":\"Chemistry and Camera Complex\"},{\"name\":\"MAHLI\",\"full_name\":\"Mars Hand Lens Imager\"},{\"name\":\"MARDI\",\"full_name\":\"Mars Descent Imager\"},{\"name\":\"RHAZ\",\"full_name\":\"Rear Hazard Avoidance Camera\"}]}}]\n};\n\n\n// A reducer function for the Redux store, managing state transitions based on actions.\nexport const reducer = (state = stateChunk, action) => {\n  switch (action.type) {\n    case \"CRITERIA\": {\n      return {\n        ...state,\n        ...action.criteria\n      };\n    }\n\n        // Action to handle the completion of a search, updating the photos array.\n    case \"CRITERIA_CHANGE_FULFILLED\": {\n      return {\n        ...state,\n        photos: action.payload.map((response) => response.photos).flat()\n      };\n    }\n        // Default case to return current state if action type is unrecognized.\n    default: return state;\n  }\n};\n\n\n// Connecting the RoverSearch component to the Redux store.\nconst ConnectedRoverSearch = connect(\n    // Mapping the Redux state to the component's props.\n  (state) => state,\n    // Mapping dispatch to props, including debounced search actions.\n  (dispatch) => ({\n        // Dispatches an action to update search criteria.\n    onCriteriaChange: (criteria) => {\n      dispatch({type: \"CRITERIA\", criteria});\n    },\n        // Dispatches a debounced action to perform the search.\n    onSearch: debounce((criteria) => {\n      dispatch({type: \"CRITERIA_CHANGE\", criteria, payload: nasa.searchImages(criteria) });\n    }, 500)\n  })\n)(RoverSearch);\n\nexport default ConnectedRoverSearch;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport ConnectedRoverSearch, {\r\n  reducer as storeReducer\r\n} from \"./pages/ConnectedRoverSearch\";\r\nimport promise from \"redux-promise-middleware\";\r\n\r\nconst finalCreateStore = compose(\r\n  applyMiddleware(promise),\r\n  window.devToolsExtension ? window.devToolsExtension() : f => f\r\n)(createStore);\r\nconst store = finalCreateStore(storeReducer);\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedRoverSearch />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}